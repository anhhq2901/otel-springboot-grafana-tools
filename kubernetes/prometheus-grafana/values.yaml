kube-prometheus-stack:
  prometheus:
    prometheusSpec:
      # Enable Exemplar Storage - Prometheus 
      enableFeatures:
        - exemplar-storage
      additionalScrapeConfigs:
        - job_name: 'kubernetes-service-endpoints'
          scrape_interval: 5s
          scrape_timeout: 2s
          kubernetes_sd_configs:
            - role: endpoints
          relabel_configs:
            - source_labels: [__meta_kubernetes_service_annotation_prometheus_io_scrape]
              action: keep
              regex: true
            - source_labels: [__meta_kubernetes_service_annotation_prometheus_io_scheme]
              action: replace
              target_label: __scheme__
              regex: (https?)
            - source_labels: [__meta_kubernetes_service_annotation_prometheus_io_path]
              action: replace
              target_label: __metrics_path__
              regex: (.+)
            - source_labels: [__address__, __meta_kubernetes_service_annotation_prometheus_io_port]
              action: replace
              target_label: __address__
              regex: (.+)(?::\d+);(\d+)
              replacement: $1:$2
            - action: labelmap
              regex: __meta_kubernetes_service_label_(.+)
            - source_labels: [__meta_kubernetes_namespace]
              action: replace
              target_label: kubernetes_namespace
            - source_labels: [__meta_kubernetes_service_name]
              action: replace
              target_label: kubernetes_name
  grafana:
    service:
      type: ClusterIP
    # Anonymous login without credentials -- ONLY NON PRODUCTION ENVIRONMENTS!
    # grafana.ini:
    #   auth:
    #     disable_login_form: true
    #   auth.anonymous:
    #     enabled: true
    #     org_name: "Main Org."
    #     org_role: Admin
    sidecar:
      dashboards:
        searchNamespace: ALL
    #Import Prometheus, Loki and Tempo Datasources
    additionalDataSources:
      - name: Prometheus
        type: prometheus
        uid: prometheus
        access: proxy
        url: http://monitoring-kube-prometheus-prometheus:9090
        jsonData:
          exemplarTraceIdDestinations:
            # Prometheus Exemplar Metrics relationated with Tempo trace_id variable.
            - name: trace_id
              datasourceUid: tempo
              urlDisplayLabel: View in Tempo
      - name: Loki
        type: loki
        uid: loki
        access: proxy
        url: http://monitoring-loki-distributed-gateway
        jsonData:
          derivedFields:
            # Opentelemetry set trace_id in log and Loki search this metric for relating with Tempo traces.
            - name: trace_id
              datasourceUid: tempo
              matcherRegex: "trace_id=(\\w+)"
              url: '$${__value.raw}'
      - name: Tempo
        type: tempo
        uid: tempo
        access: proxy
        url: http://monitoring-tempo-query-frontend:3100
        jsonData:
          httpMethod: GET
          # Tempo redirects to Loki logs by specific trace_id
          tracesToLogs:
            datasourceUid: 'loki'
            tags: [ 'app' ]
            spanStartTimeShift: 1s
            spandEndTimeShift: 1s
            lokiSearch: true
          serviceMap:
            datasourceUid: 'prometheus'
promtail:
  config:
    snippets:
      pipelineStages:
        # not cri, because we're running in k3s with docker runtime
        - docker: {}
    # Loki service url
    clients:
      - url: http://monitoring-loki-distributed-gateway/loki/api/v1/push

tempo-distributed:
  traces:
    otlp:
      grpc:
        # -- Enable Tempo to ingest Jaeger GRPC traces
        enabled: true
        # -- Jaeger GRPC receiver config
        receiverConfig: {}

  queryFrontend:
    service:
      type: ClusterIP
      annotations: {}
        # service.beta.kubernetes.io/aws-load-balancer-internal: "true"
        # service.beta.kubernetes.io/aws-load-balancer-type: "nlb"
        # service.beta.kubernetes.io/aws-load-balancer-backend-protocol: "tcp"
  config: |
    query_frontend:
      search:
        max_duration: 0
    multitenancy_enabled: false
    compactor:
      compaction:
        block_retention: 1440h
    distributor:
      receivers:
        jaeger:
          protocols:
            thrift_compact:
              endpoint: 0.0.0.0:6831
            thrift_binary:
              endpoint: 0.0.0.0:6832
            thrift_http:
              endpoint: 0.0.0.0:14268
            grpc:
              endpoint: 0.0.0.0:14250
        otlp:
          protocols:
            http:
              endpoint: 0.0.0.0:55681
            grpc:
              endpoint: 0.0.0.0:4317
    querier:
      frontend_worker:
        frontend_address: monitoring-tempo-query-frontend-discovery:9095
    ingester:
      lifecycler:
        ring:
          replication_factor: 1
          kvstore:
            store: memberlist
        tokens_file_path: /var/tempo/tokens.json
    memberlist:
      abort_if_cluster_join_fails: false
      join_members:
        - monitoring-tempo-gossip-ring
    overrides:
      per_tenant_override_config: /conf/overrides.yaml
    server:
      http_listen_port: 3100
      log_level: info
      grpc_server_max_recv_msg_size: 4.194304e+06
      grpc_server_max_send_msg_size: 4.194304e+06
    storage:
      trace:
        backend: s3
        s3:
          bucket: tempo
          endpoint: minio.default.svc.cluster.local:9000
          access_key: tempo
          secret_key: supersecret
          insecure: true
        blocklist_poll: 5m
        wal:
          path: /var/tempo/wal
